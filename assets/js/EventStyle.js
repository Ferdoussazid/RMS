import { formatDistance } from 'date-fns'
import { SITE_EVENT, RECTIFIER_ALARM } from '~/assets/js/Constant'

export const getEventColor = name => {
  const blueGroup = [SITE_EVENT.DOOR_OPEN, SITE_EVENT.LOCK_OPEN]
  const greenGroup = [SITE_EVENT.DOOR_CLOSE, SITE_EVENT.LOCK_CLOSE, SITE_EVENT.SECURITY_BREACH_CLEARED]
  const redGroup = [
    SITE_EVENT.DC_LOW_VOLTAGE,
    SITE_EVENT.DC_CRITICAL_VOLTAGE,
    SITE_EVENT.SITE_DOWN,
    SITE_EVENT.SECURITY_BREACH,
    SITE_EVENT.HIGH_VIBRATION,
    SITE_EVENT.HIGH_MOTION,
    SITE_EVENT.HIGH_TEMPERATURE,
    SITE_EVENT.DC_FAIL,
    SITE_EVENT.DC_LOAD_FAIL,
    SITE_EVENT.LOCK_OPEN_FAIL,
    SITE_EVENT.LOCK_CLOSE_FAIL,
    SITE_EVENT.LOCK_FAULT,
    SITE_EVENT.CARD_READER_FAULT,
    SITE_EVENT.MDB_FAULT,
    SITE_EVENT.RECTIFIER_FAIL,
    SITE_EVENT.DEVICE_OFFLINE,
    SITE_EVENT.BATTERY_LOW,
    // SITE_EVENT.LT_MAINS_OUTAGE,
  ]
  const yellowGroup = [
    SITE_EVENT.AC_FAIL,
    SITE_EVENT.AVIATION_LIGHT_FAIL,
    SITE_EVENT.BATTERY_POWER,
    SITE_EVENT.MAINS_FAIL,
    SITE_EVENT.DG_POWER,
    SITE_EVENT.PG_POWER,
    SITE_EVENT.MAINS_OUTAGE,
    SITE_EVENT.DC_FAN_FAULT,
    SITE_EVENT.WATER_DETECTION,
    SITE_EVENT.SMOKE_DETECTION,
    SITE_EVENT.DC_OVERLOAD,
    SITE_EVENT.LOW_VIBRATION,
    SITE_EVENT.INVERTER_BATTERY_LOW,
  ]

  if (blueGroup.includes(name)) {
    return 'border-t-blue-500'
  } else if (greenGroup.includes(name)) {
    return 'border-t-green-400'
  } else if (redGroup.includes(name)) {
    return 'border-t-red-400'
  } else if (yellowGroup.includes(name)) {
    return 'border-t-yellow-400'
  } else {
    return 'border-t-white'
  }
}

export const getRectifierEventColor = name => {
  const blueGroup = []
  const greenGroup = []
  const redGroup = [
    // SITE_EVENT.LT_MAINS_OUTAGE,

    RECTIFIER_ALARM.DC_LOW_VOLTAGE,

    RECTIFIER_ALARM.BATTERY_LOW,

    RECTIFIER_ALARM.MAINS_FAILURE,

    RECTIFIER_ALARM.SITE_DOWN,

    RECTIFIER_ALARM.RECTIFIER_FAILURE,

    // sarbs rectifier failure

    RECTIFIER_ALARM.MODULE_1_COMM_FAIL,
    RECTIFIER_ALARM.MODULE_1_FAIL,
    RECTIFIER_ALARM.MODULE_2_COMM_FAIL,
    RECTIFIER_ALARM.MODULE_2_FAIL,
    RECTIFIER_ALARM.MODULE_3_COMM_FAIL,
    RECTIFIER_ALARM.MODULE_3_FAIL,
    RECTIFIER_ALARM.MODULE_4_COMM_FAIL,
    RECTIFIER_ALARM.MODULE_4_FAIL,
    RECTIFIER_ALARM.MODULE_5_COMM_FAIL,
    RECTIFIER_ALARM.MODULE_5_FAIL,
    RECTIFIER_ALARM.MODULE_6_COMM_FAIL,
    RECTIFIER_ALARM.MODULE_6_FAIL,
    RECTIFIER_ALARM.LLVD1,
    RECTIFIER_ALARM.SYSTEM_VOLTS_LOW,

    // vertiv rectifier failure
    RECTIFIER_ALARM.COMMUNICATION_FAIL,
    RECTIFIER_ALARM.LLVD,

    // JVOLT
    RECTIFIER_ALARM.SITE_DOWN,
    RECTIFIER_ALARM.DC_LOW,
    RECTIFIER_ALARM.AC_FAIL,
    RECTIFIER_ALARM.RECTIFIER_MODULE_FAULT,
  ]
  const yellowGroup = [
    // all general alarms
    RECTIFIER_ALARM.DC_HIGH_VOLTAGE,

    RECTIFIER_ALARM.BLVD,

    RECTIFIER_ALARM.BATTERY_DISCHARGE,

    RECTIFIER_ALARM.RECTIFIER_OVERLOAD,

    RECTIFIER_ALARM.HIGH_TEMPERATURE,

    RECTIFIER_ALARM.DOOR_OPEN,

    RECTIFIER_ALARM.SPD_FAIL_1,

    RECTIFIER_ALARM.SMOKE,

    RECTIFIER_ALARM.SPD_FAIL_2,

    RECTIFIER_ALARM.SPD_FAIL_3,

    RECTIFIER_ALARM.SPD_FAIL_4,

    RECTIFIER_ALARM.SPD_FAIL_5,

    RECTIFIER_ALARM.SPD_FAIL_6,

    RECTIFIER_ALARM.COMMUNICATION_FAIL,

    RECTIFIER_ALARM.OVER_TEMPERATURE,

    RECTIFIER_ALARM.RECTIFIER_FAULT,

    RECTIFIER_ALARM.PROTECTION_MODE,

    RECTIFIER_ALARM.FAN_FAULT,

    RECTIFIER_ALARM.POWER_LIMIT,

    RECTIFIER_ALARM.CURRENT_IMBALANCE,

    RECTIFIER_ALARM.AC_FAILURE,

    RECTIFIER_ALARM.HIGH_VOLTAGE_SHUTDOWN,

    RECTIFIER_ALARM.AC_POWER_LIMIT,

    RECTIFIER_ALARM.TEMPERATURE_POWER_LIMIT,

    RECTIFIER_ALARM.DG_STATE,

    RECTIFIER_ALARM.AC_MODE,

    RECTIFIER_ALARM.SYSTEM_VOLTS_HIGH,

    RECTIFIER_ALARM.ENV_HUMIDITY_LOW,

    RECTIFIER_ALARM.ENV_HUMIDITY_HIGH,

    RECTIFIER_ALARM.AC_L1_PH_FAIL,

    RECTIFIER_ALARM.AC_L1_VOL_LOW,

    RECTIFIER_ALARM.AC_L1_VOL_HIGH,

    RECTIFIER_ALARM.AC_L2_PH_FAIL,

    RECTIFIER_ALARM.AC_L2_VOL_LOW,

    RECTIFIER_ALARM.AC_L2_VOL_HIGH,

    RECTIFIER_ALARM.AC_L3_PH_FAIL,

    RECTIFIER_ALARM.AC_L3_VOL_LOW,

    RECTIFIER_ALARM.AC_L3_VOL_HIGH,

    RECTIFIER_ALARM.DIGITAL_ALARM_1,

    RECTIFIER_ALARM.DIGITAL_ALARM_2,

    RECTIFIER_ALARM.DIGITAL_ALARM_3,

    RECTIFIER_ALARM.DIGITAL_ALARM_4,

    RECTIFIER_ALARM.DIGITAL_ALARM_5,

    RECTIFIER_ALARM.DIGITAL_ALARM_6,

    RECTIFIER_ALARM.DIGITAL_ALARM_7,

    RECTIFIER_ALARM.DIGITAL_ALARM_8,

    RECTIFIER_ALARM.SPD_ALARM,

    RECTIFIER_ALARM.LOAD_1_FUSE_ALARM,

    RECTIFIER_ALARM.LOAD_2_FUSE_ALARM,

    RECTIFIER_ALARM.SHORT_TEST_FAIL,

    RECTIFIER_ALARM.BATTERY_TEST_FAIL,

    RECTIFIER_ALARM.LLVD2,

    RECTIFIER_ALARM.LLVD3,

    RECTIFIER_ALARM.LLVD4,

    RECTIFIER_ALARM.ECO,

    RECTIFIER_ALARM.LOAD_OVER_CURRENT,

    RECTIFIER_ALARM.MODULE_1_AC_FAIL,

    RECTIFIER_ALARM.MODULE_1_TEMP_HIGH,

    RECTIFIER_ALARM.MODULE_1_PROTECT,

    RECTIFIER_ALARM.MODULE_1_FAN_FAIL,

    RECTIFIER_ALARM.MODULE_1_VOL_OVER,

    RECTIFIER_ALARM.MODULE_2_AC_FAIL,

    RECTIFIER_ALARM.MODULE_2_TEMP_HIGH,

    RECTIFIER_ALARM.MODULE_2_PROTECT,

    RECTIFIER_ALARM.MODULE_2_FAN_FAIL,

    RECTIFIER_ALARM.MODULE_2_VOL_OVER,

    RECTIFIER_ALARM.MODULE_3_AC_FAIL,

    RECTIFIER_ALARM.MODULE_3_TEMP_HIGH,

    RECTIFIER_ALARM.MODULE_3_PROTECT,

    RECTIFIER_ALARM.MODULE_3_FAN_FAIL,

    RECTIFIER_ALARM.MODULE_3_VOL_OVER,

    RECTIFIER_ALARM.MODULE_4_AC_FAIL,

    RECTIFIER_ALARM.MODULE_4_TEMP_HIGH,

    RECTIFIER_ALARM.MODULE_4_PROTECT,

    RECTIFIER_ALARM.MODULE_4_FAN_FAIL,

    RECTIFIER_ALARM.MODULE_4_VOL_OVER,

    RECTIFIER_ALARM.MODULE_5_AC_FAIL,

    RECTIFIER_ALARM.MODULE_5_TEMP_HIGH,

    RECTIFIER_ALARM.MODULE_5_PROTECT,

    RECTIFIER_ALARM.MODULE_5_FAN_FAIL,

    RECTIFIER_ALARM.MODULE_5_VOL_OVER,

    RECTIFIER_ALARM.MODULE_6_AC_FAIL,

    RECTIFIER_ALARM.MODULE_6_TEMP_HIGH,
    RECTIFIER_ALARM.MODULE_6_FAN_FAIL,

    // JVOLT
    RECTIFIER_ALARM.AC_SDP_STATUS,
    RECTIFIER_ALARM.LOAD_FUSE_STATUS,
    RECTIFIER_ALARM.RECTIFIER_MODULE_COMM_INTERRUPTED,
    RECTIFIER_ALARM.RECTIFIER_MODULE_1_COMM_INTERRUPTED,
    RECTIFIER_ALARM.RECTIFIER_MODULE_1_FAILURE,
    RECTIFIER_ALARM.RECTIFIER_MODULE_1_PROTECTION,
    RECTIFIER_ALARM.RECTIFIER_MODULE_2_COMM_INTERRUPTED,
    RECTIFIER_ALARM.RECTIFIER_MODULE_2_FAILURE,
    RECTIFIER_ALARM.RECTIFIER_MODULE_2_PROTECTION,
    RECTIFIER_ALARM.RECTIFIER_MODULE_3_COMM_INTERRUPTED,
    RECTIFIER_ALARM.RECTIFIER_MODULE_3_FAILURE,
    RECTIFIER_ALARM.RECTIFIER_MODULE_3_PROTECTION,
    RECTIFIER_ALARM.RECTIFIER_MODULE_4_COMM_INTERRUPTED,
    RECTIFIER_ALARM.RECTIFIER_MODULE_4_FAILURE,
    RECTIFIER_ALARM.RECTIFIER_MODULE_4_PROTECTION,
    RECTIFIER_ALARM.RECTIFIER_MODULE_5_COMM_INTERRUPTED,
    RECTIFIER_ALARM.RECTIFIER_MODULE_5_FAILURE,
    RECTIFIER_ALARM.RECTIFIER_MODULE_5_PROTECTION,
    RECTIFIER_ALARM.RECTIFIER_MODULE_6_COMM_INTERRUPTED,
    RECTIFIER_ALARM.RECTIFIER_MODULE_6_FAILURE,
    RECTIFIER_ALARM.RECTIFIER_MODULE_6_PROTECTION,
  ]

  if (blueGroup.includes(name)) {
    return 'border-t-blue-500'
  } else if (greenGroup.includes(name)) {
    return 'border-t-green-400'
  } else if (redGroup.includes(name)) {
    return 'border-t-red-400'
  } else if (yellowGroup.includes(name)) {
    return 'border-t-yellow-400'
  } else {
    return 'border-t-white'
  }
}

export const getFormattedDistance = distanceStr => {
  const splittedDistanceStr = distanceStr.split(' ')
  let lastWord = splittedDistanceStr[splittedDistanceStr.length - 1]
  switch (lastWord) {
    case 'minute':
      if (splittedDistanceStr[splittedDistanceStr.length - 2] === 'a') return '< 1 min'
      else lastWord = 'min'
      break
    case 'minutes':
      lastWord = 'min'
      break
    case 'hour':
      lastWord = 'hr'
      break
    case 'hours':
      lastWord = 'hr'
      break
    case 'year':
      lastWord = 'yr'
      break
    case 'years':
      lastWord = 'yr'
      break
    case 'month':
      lastWord = 'mo'
      break
    case 'months':
      lastWord = 'mo'
      break
  }
  return splittedDistanceStr.slice(0, -1).join(' ') + ' ' + lastWord
}

export const getEventDurationFormatted = event => {
  if (event.status === 'running') {
    return getFormattedDistance(formatDistance(new Date(), new Date(event.time)))
  } else {
    return getFormattedDistance(formatDistance(new Date(event.endAt), new Date(event.time)))
  }
}
